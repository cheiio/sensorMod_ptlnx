#ifndef IMPEDANCE_V1_H
#define IMPEDANCE_V1_H

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>
#include <sys/mman.h>
#include "definitions.h"

//Constants used in some of the functions below
#define AUTOMATIC	1
#define MANUAL		0
#define DIRECT		0
#define REVERSE		1
#define LIMITED		1
#define NONLIMITED	0

/**************************** Type Definitions *****************************/

typedef struct impedance_struct{
	_real myM; // * M - Inertia Component
	_real myB; // * B - Energy dissipation term from the viscous damper
	_real myK; // * K - Stiffness of the equivalent system

	int controllerDirection;

	_real x;
	_real xp;
	_real xpp;

	_real *myInput; // * Pointers to the Input, Output, and Setpoint variables
	_real *myOutput;
	_real *mySetpoint;

	_real *my_x;
	_real *my_xp;

	uint64_t lastTime;
	_real last_xpp, last_xp, last_x;

	unsigned long SampleTime;
	_real SampleTimeInSec;
	_real outMin, outMax;
	uint8_t inAuto;
}impedance;

//commonly used functions **************************************************************************

// * Constructor.  links the Impedance controller to the Input,
//   Output, and Setpoint.  Initial tuning parameters M B and K*/
impedance* impedance__create(_real*, _real*, _real*, _real*, _real*, 
	_real, _real, _real, uint32_t);	

void impedance__destroy(impedance*);

// * Sets Impedance Controller to either Manual (0) or Auto (non-0)
void impedance__setMode(impedance*, uint32_t);

// * Performs the Impedance Controller action calculation.
//   it should be called every time loop() cycles. ON/OFF and
//   calculation frequency can be set using SetMode
//   SetSampleTime respectively
uint8_t impedance__compute(impedance*);
										

//available but not commonly used functions ********************************************************
// * While most users will set the tunings once in the
//   constructor, this function gives the user the option
//   of changing tunings during runtime for Adaptive control
void impedance__setTunings(impedance* , _real, _real, _real);
										
// * Sets the Direction, or "Action" of the controller. DIRECT
//   means the output will increase when error is positive. REVERSE
//   means the opposite.  it's very unlikely that this will be needed
//   once it is set in the constructor.
void impedance__setControllerDirection(impedance*, uint32_t);		

// * Sets the frequency, in Milliseconds, with which
//   the PID calculation is performed.  default is 100
void impedance__getSampleTime(impedance*, uint32_t);

//Display functions ****************************************************************
//	These functions query the Impedance Controller for interal values.
_real impedance__getM(impedance*);
_real impedance__getB(impedance*);
_real impedance__getK(impedance*);
_real impedance__get_xp(impedance*);
uint32_t impedance__getMode(impedance*);
uint32_t impedance__getDirection(impedance*);

#endif

