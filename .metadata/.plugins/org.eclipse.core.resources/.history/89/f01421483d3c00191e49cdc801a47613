/**********************************************************************************************
* Arduino Impedance Controller Library - Version 1.0
* by Sergio Pertuz <sapertuz@gmail.com>
**********************************************************************************************/

#include "Impedance_v1.hpp"


/*Constructor (...)*********************************************************
*    The Controller parameters are specified in here.
***************************************************************************/
Impedance::Impedance(_real* Input, _real* x_e, _real* x_ep, _real* Output, _real* Setpoint){

	myOutput = Output;
	myInput = Input;
	mySetpoint = Setpoint;

	my_x = x_e;
	my_xp = x_ep;

	inAuto = false;

	_real M = 1, B = 1, K = 1;
	int32_t ControllerDirection = DIRECT;

	Initialize();

	uint32_t sampTime = 5;
	Configure(sampTime, M, B, K, ControllerDirection);

	lastTime = millis() - SampleTime;
}


/* Compute() **********************************************************************
*   This function should be called every time "void loop()" executes.  the function will 
*   decide for itself whether a new Output needs to be computed. returns true when the 
*   output is computed, false when nothing has been done.
**********************************************************************************/
bool Impedance::Compute(){
	if (!inAuto) return false;

	uint64_t now = millis();
	uint64_t timeChange = (now - lastTime);
	if (timeChange >= SampleTime){
		/*Compute all the working error variables*/
		_real input = *myInput;
		_real f_error = *mySetpoint - input;
		_real x_error = x - *my_x;
		_real xp_error = xp - *my_xp;

		/*Compute Impedance Controller Output*/

		xpp = myM*(f_error - myK*x_error - myB*xp_error);
		
		// Integration Method 1 (Filtered Integral with n=2)
		xp = (SampleTimeInSec*0.5)*(xpp + last_xpp) + last_xp;
		x = (SampleTimeInSec*0.5)*(xp + last_xp) + last_x;
		
		// Integration Method 2 (Forward Euler)
		//xp = (SampleTimeInSec)*(xpp) + last_xp;
		//x = (SampleTimeInSec)*(xp) + last_x;

		if (controllerDirection == DIRECT)
		*myOutput = x;
		else
		*myOutput = (0-x);
		
		/*Remember some variables for next time*/
		last_x = x;
		last_xp = xp;
		last_xpp = xpp;
		lastTime = now;

		return true;
	}
	else return false;
}

/* SetTunings(...)*************************************************************
* This function allows the controller's dynamic performance to be adjusted.
* it's called automatically from the constructor, but tunings can also
* be adjusted on the fly during normal operation
******************************************************************************/
void Impedance::Configure(int32_t newSampleTime, _real M, _real B, _real K, uint32_t Direction){

	if (M<0 || B<0 || K<0) {
		return;
	}else{
		dispM = M; dispB = B; dispK = K;
		myM = 1/M;
		myB = B;
		myK = K;
	}


	if (NewSampleTime > 0){
		SampleTime = (unsigned long)NewSampleTime;
		SampleTimeInSec = ((_real)SampleTime) / 1000;
	}else{
		return;
	}

	controllerDirection = Direction;

}

void Impedance::SetMode(uint32_t Mode){
	bool newAuto = (Mode == AUTOMATIC);
	if (newAuto == !inAuto){  /*we just went from manual to auto*/
		Impedance::Initialize();
	}
	inAuto = newAuto;
}

/* Initialize()****************************************************************
*	does all the things that need to happen to ensure a bumpless transfer
*  from manual to automatic mode.
******************************************************************************/
void Impedance::Initialize(){

	xpp = 0;
	xp = 0;
	x = *my_x;

	last_xpp = 0;
	last_xp = 0;
	last_x = *my_x;
}

/* Status Funcions*************************************************************
* Just because you set the Kp=-1 doesn't mean it actually happened.  these
* functions query the internal state of the PID.  they're here for display
* purposes.  this are the functions the PID Front-end uses for example
******************************************************************************/
_real Impedance::GetM() { return  dispM; }
_real Impedance::GetB() { return  dispB; }
_real Impedance::GetK() { return  dispK; }
_real Impedance::Get_xp() { return  xp; }
int32_t Impedance::GetMode() { return  inAuto ? AUTOMATIC : MANUAL; }
int32_t Impedance::GetDirection() { return controllerDirection; }
